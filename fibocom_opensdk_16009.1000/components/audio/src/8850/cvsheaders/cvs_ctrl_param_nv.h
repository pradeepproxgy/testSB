/*
 * <cvs_ctrl_param_nv.h> - <cvs nv operation.>
 *
 * Copyright (c) 2019 Unisoc Communications Inc.
 * History
 *      <2021/08/05> <Xiaoyu.He> <create>
 *      cvs nv operation.
 */

#ifndef _CVS_CTRL_PARAM_NV_H_
#define _CVS_CTRL_PARAM_NV_H_

#include "osi_api.h"
#include "osi_log.h"
#include "osi_mem.h"
#include "nvm.h"
#include "CVS_frame.h"

#ifdef __cplusplus
extern "C" {
#endif

#define     NVID_ARM_CVS_NUM        0x1ab   //427
#define     NVID_ARM_CVS_PARA       0x1ac   //428


typedef enum
{
    AUDIO_MODE_APP_TYPE_VOICE,
    AUDIO_MODE_APP_TYPE_VT,
    AUDIO_MODE_APP_TYPE_VOIP_1,
    AUDIO_MODE_APP_TYPE_VOIP_2,
    AUDIO_MODE_APP_TYPE_VOIP_3,
    AUDIO_MODE_APP_TYPE_VOIP_4,
    AUDIO_MODE_APP_TYPE_LOOPBACK,
    AUDIO_MODE_APP_TYPE_RECORD,   //used in record in non-call
    AUDIO_MODE_APP_TYPE_VOLTE,   //used in record in non-call
    AUDIO_MODE_APP_TYPE_VOWIFI,   //used in record in non-call
    AUDIO_MODE_APP_TYPE_RESERVE_1,
    AUDIO_MODE_APP_TYPE_RESERVE_2,
    AUDIO_MODE_APP_TYPE_RESERVE_3,
    AUDIO_MODE_APP_TYPE_RESERVE_4,
    AUDIO_MODE_APP_TYPE_RESERVE_5,
    AUDIO_MODE_APP_TYPE_RESERVE_6,
    AUDIO_MODE_APP_TYPE_MAX,
    AUDIO_MODE_APP_TYPE_CUR_MODE
}AUDIO_MODE_APP_TYPE_E;

typedef enum {
	NV_AUDIO_CVS_HANDSET_E,
	NV_AUDIO_CVS_HANDSFREE_E,
	NV_AUDIO_CVS_HEADSET_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_E,
	NV_AUDIO_CVS_BTHS_E,
	NV_AUDIO_CVS_BTHSNREC_E,
	NV_AUDIO_CVS_BTHS_D16K_E,
	NV_AUDIO_CVS_BTHSNREC_D16K_E,
	//NV_AUDIO_CVS_REC_E, //For recording process, added by THu.

	NV_AUDIO_CVS_LOOPBHANDSFREE_E,
	NV_AUDIO_CVS_LOOPBHANDSET_E,
	NV_AUDIO_CVS_LOOPBHEADSET_E,
	NV_AUDIO_CVS_LOOPBHEADSET_TVOUT_E,

	NV_AUDIO_CVS_HANDSET_VT_E,
	NV_AUDIO_CVS_HANDSFREE_VT_E,
	NV_AUDIO_CVS_HEADSET_VT_E,
	NV_AUDIO_CVS_BTHS_VT_E,

	NV_AUDIO_CVS_HANDSET_VOIP_1_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_VOIP_1_E,
	NV_AUDIO_CVS_HANDSFREE_VOIP_1_E,
	NV_AUDIO_CVS_HEADSET_VOIP_1_E,
	NV_AUDIO_CVS_BTHS_VOIP_1_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_1_E,

	NV_AUDIO_CVS_BTHS_VOIP_1_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_1_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHS_VOIP_1_WB_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_1_WB_E,
	NV_AUDIO_CVS_BTHS_VOIP_2_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_2_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHS_VOIP_2_WB_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_2_WB_E,
	NV_AUDIO_CVS_BTHS_VOIP_3_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_3_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHS_VOIP_3_WB_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_3_WB_E,
	NV_AUDIO_CVS_BTHS_VOIP_4_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_4_WB_DEV16K_E,
	NV_AUDIO_CVS_BTHS_VOIP_4_WB_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_4_WB_E,

	NV_AUDIO_CVS_HANDSET_VOIP_2_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_VOIP_2_E,
	NV_AUDIO_CVS_HANDSFREE_VOIP_2_E,
	NV_AUDIO_CVS_HEADSET_VOIP_2_E,
	NV_AUDIO_CVS_BTHS_VOIP_2_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_2_E,

	NV_AUDIO_CVS_HANDSET_VOIP_3_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_VOIP_3_E,
	NV_AUDIO_CVS_HANDSFREE_VOIP_3_E,
	NV_AUDIO_CVS_HEADSET_VOIP_3_E,
	NV_AUDIO_CVS_BTHS_VOIP_3_E,
	NV_AUDIO_CVS_BTHSNREC_VOIP_3_E,

	 NV_AUDIO_CVS_HANDSET_VOIP_4_E,
	 NV_AUDIO_CVS_HEADSET_TVOUT_VOIP_4_E,
	 NV_AUDIO_CVS_HANDSFREE_VOIP_4_E,
	 NV_AUDIO_CVS_HEADSET_VOIP_4_E,
	 NV_AUDIO_CVS_BTHS_VOIP_4_E,
	 NV_AUDIO_CVS_BTHSNREC_VOIP_4_E,

	 NV_AUDIO_CVS_LOOPBBTHS_E,

	 NV_AUDIO_CVS_HANDSET_REC_E,
	 NV_AUDIO_CVS_HANDSFREE_REC_E,
	 NV_AUDIO_CVS_BTHS_REC_E,

	NV_AUDIO_CVS_HANDSET_TD_E,
	NV_AUDIO_CVS_HANDSFREE_TD_E,
	NV_AUDIO_CVS_HEADSET_TD_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_TD_E,

	NV_AUDIO_CVS_HANDSET_WB_E,
	NV_AUDIO_CVS_HANDSFREE_WB_E,
	NV_AUDIO_CVS_HEADSET_WB_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_WB_E,

	NV_AUDIO_CVS_HANDSET_SWB_E,
	NV_AUDIO_CVS_HANDSFREE_SWB_E,
	NV_AUDIO_CVS_HEADSET_SWB_E,
	NV_AUDIO_CVS_HEADSET_TVOUT_SWB_E,

	NV_AUDIO_CVS_MAX
}NV_AUDIO_CVS_E_;

typedef uint32 NV_AUDIO_CVS_E;

void CVS_CreatParamList(void);

char *CVS_GetDevModeNameByIndex(int32 index);

void CVS_RefreshParamList(void);

int32 CVS_GetDevModeNum(void);

char *CVS_CTRL_PARAM_GetNameByIndex(int32 index);

int32 CVS_CTRL_PARAM_GetParamFromMemByName(
	char *name_ptr,
	CVSI_CTRL_PARAM_NV_T *cvs_ctrl_param_nv_ptr);

int32 CVS_CTRL_PARAM_GetParamFromMemByIndex(
	int32 index,
	CVSI_CTRL_PARAM_NV_T *cvs_ctrl_param_nv_ptr);

int32 CVS_CTRL_PARAM_SetParamToMem(
	CVSI_CTRL_PARAM_NV_T *cvs_ctrl_param_nv_ptr);

int32 CVS_CTRL_PARAM_GetParamFromFlashByName(
	char *name_ptr,
	CVSI_CTRL_PARAM_NV_T *cvs_ctrl_param_nv_ptr);

int32 CVS_CTRL_PARAM_GetParamFromFlashByIndex(
	int32 index,
	CVSI_CTRL_PARAM_NV_T *cvs_ctrl_param_nv_ptr);

int32 CVS_CTRL_PARAM_SetParamToFlash(
	CVSI_CTRL_PARAM_NV_T *cvs_ctrl_param_nv_ptr);

char * CVS_CTRL_PARAM_GetDevModeNameById(
	NV_AUDIO_CVS_E cvs_mode_e);

#ifdef __cplusplus
}
#endif

#endif //#ifndef _LVVE_CONTROL_PARAM_NV_H_
